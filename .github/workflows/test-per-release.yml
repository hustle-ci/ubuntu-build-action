# Copyright 2023 You-Sheng Yang and others
# SPDX-License-Identifier: FSFAP
# Copying and distribution of this file, with or without modification, are
# permitted in any medium without royalty provided the copyright notice and
# this notice are preserved. This file is offered as-is, without any warranty.
---
name: 'test per release'
on:
  workflow_call:
    inputs:
      vendor:
        description: 'Distribution vendor.'
        type: string
        required: true
      release:
        description: 'Distribution release name, e.g. unstable for debian.'
        type: string
        required: true
      default_release:
        description: >-
          The default release to be used for actions with no release variants.
        type: string
        required: true
      architectures:
        description: 'Space-separated debian architecture names.'
        type: string
        required: true

env:
  ARCHIVED_SOURCE_TAR_SUFFIX: .source.tar.gz

jobs:
  extract-source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/clone-test-project
        id: clone
        with:
          vendor: ${{ inputs.vendor }}
          release: ${{ inputs.release }}

      - name: Extract source package
        id: extract
        uses: ./actions/extract-source
        with:
          image: ${{ format('ghcr.io/{0}/staging:{1}-gbp-{2}', github.repository_owner, github.run_id, inputs.default_release) }}
          source_path: ${{ steps.clone.outputs.source_path }}
          output_path: ${{ hashFiles('action.yml', 'actions/*/action.yml') }}

      # Github ations/upload-artifact does not retain artifact permissions.
      # See: https://github.com/actions/upload-artifact/issues/38
      - name: Archive built source directory
        run: |
          cd ${{ steps.extract.outputs.output_path }}

          name=${{ steps.extract.outputs.built_origtar }}
          name="${name%.orig.*}${ARCHIVED_SOURCE_TAR_SUFFIX}"
          tar acpf "${name}" -C source .

          rm -rf source

      - name: Upload source package
        uses: actions/upload-artifact@v4
        with:
          name: per-action-source-${{ inputs.release }}
          path: |
            ${{ steps.extract.outputs.output_path }}
          if-no-files-found: error

  generate-matrix:
    outputs:
      full-build: ${{ steps.generate.outputs.full-build }}
    runs-on: ubuntu-latest
    steps:
      - name: Install prerequisites
        run: |
          echo "::group::Apt"
          sudo apt-get update --quiet
          sudo apt-get install --no-install-recommends --yes jq
          echo "::endgroup::"

          echo "::group::jq version"
          jq --version
          echo "::endgroup::"

      - name: Fetch supported architectures
        id: generate
        run: |
          full_build="[]"
          for arch in ${{ inputs.architectures }}; do
            attrs="\"build-arch\": \"${arch}\""
            full_build="$(echo "${full_build}" | jq -c -M ". + [{${attrs}}]")"
          done

          first_non_amd64_arch="$(echo "${full_build}" | jq -c -M -r '[.[] | select(."build-arch" != "amd64")][0]."build-arch"')"
          if [ "${first_non_amd64_arch}" != "null" ]; then
            attrs="\"build-arch\": \"amd64\", \"host-arch\": \"${first_non_amd64_arch}\""
            full_build="$(echo "${full_build}" | jq -c -M ". + [{${attrs}}]")"
          fi

          # continue-on-error on known failure architectures: <release>:(build-arch|host-arch):<arch>
          coes=()
          for coe in "${coes[@]}"; do
            r="${coe%%:*}"; coe="${coe#*:}"; a="${coe#*:}"; m="${coe%:*}"
            [ "${r}" = "${{ inputs.release }}" ] \
                && full_build="$(echo "${full_build}" | jq -c -M ".[map(.\"${m}\" == \"${a}\") | index(true)].\"continue-on-error\" = \"true\"")"
          done

          echo "::group::Outputs"
          echo "full-build=${full_build}" | tee -a "${GITHUB_OUTPUT}"
          echo "::endgroup::"

  full-build:
    needs:
      - extract-source
      - generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.generate-matrix.outputs.full-build) }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download source tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-source-${{ inputs.release }}
      # Github ations/upload-artifact does not retain artifact permissions.
      # See: https://github.com/actions/upload-artifact/issues/38
      - name: Extract archived source directory
        run: |
          mkdir source
          tar axf *"${ARCHIVED_SOURCE_TAR_SUFFIX}" -C source

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        if: ${{ matrix.build-arch != 'amd64' || (matrix.host-arch && matrix.host-arch != 'amd64') }}
        uses: docker/setup-qemu-action@v3

      - name: Build package
        id: full-build
        uses: ./actions/gbp
        env:
          # We're not interested in whether package specific test cases work at
          # this moment.
          DEB_BUILD_OPTIONS: nocheck
        with:
          image: ${{ format('ghcr.io/{0}/staging:{1}-base-{2}', github.repository_owner, github.run_id, inputs.release) }}
          release: ${{ inputs.release }}
          source_path: 'source'
          build_arch: ${{ matrix.build-arch }}
          host_arch: ${{ matrix.host-arch }}

      - name: Upload binary package
        uses: actions/upload-artifact@v4
        with:
          name: per-action-binary-${{ steps.full-build.outputs.release }}-${{ steps.full-build.outputs.build_arch }}-${{ steps.full-build.outputs.host_arch }}
          path: |
            ${{ steps.full-build.outputs.output_path }}/*.build
            ${{ steps.full-build.outputs.output_path }}/*.buildinfo
            ${{ steps.full-build.outputs.output_path }}/*.changes
            ${{ steps.full-build.outputs.output_path }}/*.ddeb
            ${{ steps.full-build.outputs.output_path }}/*.deb
            ${{ steps.full-build.outputs.output_path }}/*.debian.tar.*
            ${{ steps.full-build.outputs.output_path }}/*.dsc
          if-no-files-found: error

  build-types:
    needs:
      - extract-source
    strategy:
      fail-fast: false
      matrix:
        build-type:
          - source
          - binary
          - any
          - all
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download source tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-source-${{ inputs.release }}
      # Github ations/upload-artifact does not retain artifact permissions.
      # See: https://github.com/actions/upload-artifact/issues/38
      - name: Extract archived source directory
        run: |
          mkdir source
          tar axf *"${ARCHIVED_SOURCE_TAR_SUFFIX}" -C source

      - name: Build package
        uses: ./actions/gbp
        env:
          # We're not interested in whether package specific test cases work at
          # this moment.
          DEB_BUILD_OPTIONS: nocheck
        with:
          image: ${{ format('ghcr.io/{0}/staging:{1}-base-{2}', github.repository_owner, github.run_id, inputs.release) }}
          release: ${{ inputs.release }}
          source_path: 'source'
          build_type: ${{ matrix.build-type }}

  missing-breaks:
    needs:
      - full-build
    runs-on: ubuntu-latest
    continue-on-error: true
    # https://github.com/hustle-ci/ubuntu-build-action/issues/5
    if: ${{ !contains(fromJSON('["trusty","xenial","bionic"]'), inputs.release) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binary tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-binary-${{ inputs.release }}-amd64-amd64

      - name: Check missing-breaks
        id: missing-breaks
        uses: ./actions/missing-breaks
        with:
          image: ${{ format('ghcr.io/{0}/staging:{1}-generic-tests-{2}', github.repository_owner, github.run_id, inputs.release) }}
          release: ${{ inputs.release }}

  rc-bugs:
    needs:
      - full-build
    runs-on: ubuntu-latest
    if: ${{ inputs.vendor == 'debian' }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binary tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-binary-${{ inputs.release }}-amd64-amd64

      - name: Check rc-bugs
        id: rc-bugs
        uses: ./actions/rc-bugs
        with:
          image: ${{ format('ghcr.io/{0}/staging:{1}-generic-tests-{2}', github.repository_owner, github.run_id, inputs.release) }}
          release: ${{ inputs.release }}

  lintian:
    needs:
      - full-build
    runs-on: ubuntu-latest
    # https://github.com/hustle-ci/debian-build-action/issues/2
    if: ${{ inputs.release != 'experimental' }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download source tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-source-${{ inputs.release }}
      - name: Download binary tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-binary-${{ inputs.release }}-amd64-amd64

      - name: Check lintian
        id: lintian
        uses: ./actions/lintian
        with:
          image: ${{ format('ghcr.io/{0}/staging:{1}-lintian-{2}', github.repository_owner, github.run_id, inputs.release) }}
          release: ${{ inputs.release }}
          # Ubuntu grep package is imported from Debian
          suppress_tags: 'bad-distribution-in-changes-file'

  blhc:
    needs:
      - full-build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binary tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-binary-${{ inputs.release }}-amd64-amd64

      - name: Check blhc
        uses: ./actions/blhc
        with:
          image: ${{ format('ghcr.io/{0}/staging:{1}-blhc-{2}', github.repository_owner, github.run_id, inputs.default_release) }}
          # grep/trusty did not enable hardening flag
          args: ${{ (inputs.release == 'trusty') && '--ignore-flag -fstack-protector-strong' || '' }}

  autopkgtest:
    needs:
      - full-build
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download source tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-source-${{ inputs.release }}
      - name: Download binary tarball
        uses: actions/download-artifact@v4
        with:
          name: per-action-binary-${{ inputs.release }}-amd64-amd64

      - name: Autopkgtest
        uses: ./actions/autopkgtest
        with:
          image: ${{ format('ghcr.io/{0}/staging:{1}-autopkgtest-{2}', github.repository_owner, github.run_id, inputs.default_release) }}
          testbed: ${{ format('ghcr.io/{0}/staging:{1}-base-{2}', github.repository_owner, github.run_id, inputs.release) }}
