# Copyright 2023 You-Sheng Yang and others
# SPDX-License-Identifier: FSFAP
# Copying and distribution of this file, with or without modification, are
# permitted in any medium without royalty provided the copyright notice and
# this notice are preserved. This file is offered as-is, without any warranty.
---
name: 'CI'
on:
  push:
    branches:
      - main
      - 'releases/v*'
    tags:
      - 'v*'
    paths-ignore:
      - LICENSE
      - 'README.*'
  pull_request:
    paths-ignore:
      - LICENSE
      - 'README.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  static-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: 'Install prerequisites'
        run: |
          sudo apt-get update --quiet
          sudo apt-get install --no-install-recommends -y \
              licensecheck

      - name: 'Check license'
        run: |
          PROBLEMS=0

          BAD_FILES=$(licensecheck -r . | grep -Ev '(README.md)'| grep UNKNOWN) || true
          if [ -n "${BAD_FILES}" ]; then
            echo "ERROR: Missing license statement in the following files:"
            echo "$BAD_FILES"
            PROBLEMS=$(($PROBLEMS + 1))
          fi

          exit $PROBLEMS

      - name: 'reviewdog/shellcheck'
        uses: haya14busa/action-cond@v1
        id: reporter
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: "github-pr-review"
          if_false: "github-check"
      - uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: ${{ steps.reporter.outputs.value }}
          level: warning
          exclude: |
            */.git/*

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      image-version: ${{ steps.image-version.outputs.image-version }}
      releases: ${{ steps.release.outputs.releases }}
      default_index: ${{ steps.release.outputs.default_index }}
      default_release: ${{ steps.release.outputs.default_release }}
      releases-targets: ${{ steps.release-target.outputs.releases-targets }}
    steps:
      - name: Install prerequisites
        run: |
          echo "::group::Apt"
          sudo apt-get update --quiet
          sudo apt-get install --no-install-recommends --yes jq
          echo "::endgroup::"

          echo "::group::jq version"
          jq --version
          echo "::endgroup::"

      - name: Checking image version
        id: image-version
        env:
          IMAGE_VERSION: '0.0'
        run: |
          version="${IMAGE_VERSION}"
          case "${{ format('{0}:{1}', github.event_name, github.ref) }}" in
            push:refs/tags/*) version="${{ github.ref_name }}" ;;
            *) ;;
          esac

          echo "::group::Outputs"
          echo "image-version=${version}" | tee -a "${GITHUB_OUTPUT}"
          echo "::endgroup::"

      - name: Enumerate vendor releases
        id: vendor-releases
        run: |
          d="$(mktemp -d)"
          { \
            cd "$d"; \
            wget --spider -r --no-parent --level=1 --quiet \
                --no-host-directories --cut-dirs=2 \
                http://archive.ubuntu.com/ubuntu/dists/; \
            cd -; \
          }
          releases="$(ls -1 "$d" | grep -ve '-\|devel' | sed 's,^,ubuntu:,' | tr '\n' ' ')"
          rm -rf "$d"

          content="$(wget -q -O - "http://archive.ubuntu.com/ubuntu/dists/devel/Release" | grep -v '^ ')"
          default_release="$(echo "${content}" | awk '/^Codename:/ {print $2}')"

          echo "::group::Outputs"
          { \
            echo "releases=${releases}"; \
            echo "default_release=${default_release}"; \
          } | tee -a "${GITHUB_OUTPUT}"
          echo "::endgroup::"

      - name: Generate supported matrix
        id: release
        env:
          DEFAULT_RELEASE: ${{ steps.vendor-releases.outputs.default_release }}
          VENDOR_RELEASES: ${{ steps.vendor-releases.outputs.releases }}
        run: |
          releases_json="[]"
          for vendor_release in ${VENDOR_RELEASES}; do
            vendor="${vendor_release%:*}"
            release="${vendor_release#*:}"
            obj_json="{\"vendor\": \"${vendor}\", \"release\": \"${release}\"}"

            content="$(wget -q -O - "http://archive.ubuntu.com/ubuntu/dists/${release}/Release" | grep -v '^ ')"

            archs=()
            for arch in $(echo "${content}" | awk '/^Architectures:/ {$1=""; $0=$0; print $0}'); do
              [ "${arch}" != "all" ] || continue
              # https://github.com/hustle-ci/ubuntu-build-action/issues/3
              [ "${arch}" != "i386" ] || continue
              # https://github.com/hustle-ci/debian-build-action/issues/5
              [ "${arch}" != "mipsel" ] || continue
              # https://github.com/hustle-ci/ubuntu-build-action/issues/2
              [ "${arch}" != "powerpc" ] || continue
              # https://github.com/hustle-ci/ubuntu-build-action/issues/4
              [ "${arch}" != "riscv64" ] || continue

              archs+=("${arch}")
            done
            obj_json="$(echo "${obj_json}" | jq -c -M ".architectures=\"${archs[*]}\"")"

            aliases=("${release}")

            codename="$(echo "${content}" | awk '/^Codename:/ {print $2}')"
            [ "${codename}" = "${release}" ] || aliases+=("${codename}")

            version="$(echo "${content}" | awk '/^Version:/ {print $2}')"
            [ -z "${version}" ] || aliases+=("${version}")

            if [ "${release}" = "${DEFAULT_RELEASE}" ]; then
              aliases+=(devel)
            fi

            obj_json="$(echo "${obj_json}" | jq -c -M ".aliases=\"${aliases[*]}\"")"
            releases_json="$(echo "${releases_json}" | jq -c -M ". + [${obj_json}]")"
          done

          default_index=$(echo "${releases_json}" | \
              jq ". | map(.release == \"${DEFAULT_RELEASE}\") | index(true)")

          echo "::group::Outputs"
          echo "releases=${releases_json}" | tee -a "${GITHUB_OUTPUT}"
          echo "default_index=${default_index}" | tee -a "${GITHUB_OUTPUT}"
          echo "default_release=${DEFAULT_RELEASE}" | tee -a "${GITHUB_OUTPUT}"
          echo "::endgroup::"

      - name: Generate release matrix with selected targets
        id: release-target
        run: |
          targets=(generic-tests lintian)
          targets_json="$(jq -c -M -n '$ARGS.positional' --args "${targets[@]}")"
          releases_json='${{ steps.release.outputs.releases }}'
          output_json="$(echo "${targets_json}" | jq -c -M "${releases_json} as \$releases | [.[] as \$in | (\$releases[] | . + {\"target\": \$in})]")"

          # https://github.com/hustle-ci/debian-build-action/issues/2
          output_json="$(echo "${output_json}" | jq -c -M "del(.[] | select(.release == \"experimental\" and .target == \"lintian\"))")"

          echo "::group::Outputs"
          echo "releases-targets=${output_json}" | tee -a "${GITHUB_OUTPUT}"
          echo "::endgroup::"

  base-images:
    runs-on: ubuntu-latest
    needs:
      - generate-matrix
      - static-checks
    strategy:
      matrix:
        include: ${{ fromJSON(needs.generate-matrix.outputs.releases) }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/build-image
        with:
          vendor: ${{ matrix.vendor }}
          release: ${{ matrix.release }}
          architectures: ${{ matrix.architectures }}
          target: 'base'
          image_version: ${{ needs.generate-matrix.outputs.image-version }}
          tag_prefix: ${{ github.run_id }}-
          ghcr_password: ${{ secrets.GITHUB_TOKEN }}

  latest-amd64-images:
    runs-on: ubuntu-latest
    needs:
      - generate-matrix
      - base-images
    strategy:
      matrix:
        target:
          - 'autopkgtest'
          - 'blhc'
          - 'gbp'
        include:
          - ${{ fromJSON(needs.generate-matrix.outputs.releases)[fromJSON(needs.generate-matrix.outputs.default_index)] }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/build-image
        with:
          vendor: ${{ matrix.vendor }}
          release: ${{ matrix.release }}
          target: ${{ matrix.target }}
          image_version: ${{ needs.generate-matrix.outputs.image-version }}
          tag_prefix: ${{ github.run_id }}-
          ghcr_password: ${{ secrets.GITHUB_TOKEN }}

  all-releases-only-amd64-images:
    runs-on: ubuntu-latest
    needs:
      - generate-matrix
      - base-images
    strategy:
      matrix:
        include: ${{ fromJSON(needs.generate-matrix.outputs.releases-targets) }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/build-image
        with:
          vendor: ${{ matrix.vendor }}
          release: ${{ matrix.release }}
          target: ${{ matrix.target }}
          image_version: ${{ needs.generate-matrix.outputs.image-version }}
          tag_prefix: ${{ github.run_id }}-
          ghcr_password: ${{ secrets.GITHUB_TOKEN }}

  tests:
    needs:
      - generate-matrix
      - base-images
      - latest-amd64-images
      - all-releases-only-amd64-images
    uses: ./.github/workflows/tests.yml
    with:
      releases: ${{ needs.generate-matrix.outputs.releases }}
      default_release: ${{ needs.generate-matrix.outputs.default_release }}

  publish-staging-tags:
    needs:
      - generate-matrix
      - tests
    strategy:
      matrix:
        include: ${{ fromJSON(needs.generate-matrix.outputs.releases) }}
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/publish-tags.yml
    with:
      vendor: ${{ matrix.vendor }}
      release: ${{ matrix.release }}
      aliases: ${{ matrix.aliases }}
      image-version: ${{ needs.generate-matrix.outputs.image-version }}
      dry-run: ${{ github.event_name == 'pull_request' }}

  prune-staging-tags:
    needs:
      - publish-staging-tags
    if: ${{ always() }}
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/prune-staging-tags.yml
    with:
      prune-tags-regexes: |
        ^${{ github.run_id }}-
